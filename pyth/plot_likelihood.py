#!/usr/bin/env python
import sys
from pylab import *
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.mlab
import os
import re
from matplotlib.ticker import FuncFormatter

import matplotlib.pyplot as plt
import matplotlib.path as mpath
import matplotlib.lines as mlines
import matplotlib.patches as mpatches
from matplotlib.collections import PatchCollection
from matplotlib.patches import Ellipse
import matplotlib.transforms as transforms

#from matplotlib.collections import PatchCollection
#import matplotlib.path as mpath
#import matplotlib.patches as mpatches
import h5py
import pyfits
from optparse import OptionParser
from pyCPEDScommonFunctions import cpedsPythCommon



programDescription="""This is 2D likelihood plotter that
uses data generated by the cpems library.


Example usage:

plot_likelihood.py --dset 4-7 posterior2D.hdf5 --show \
    --XunitPrefix m --scaleX 1000 \
    --YunitPref m --scaleY 1000 

"""

parser = OptionParser(formatter=None, description=programDescription)
# parser.add_option("", "--zmin", dest="zmin", default=0, type="float", help='minimal z value the color bar is mapped to', metavar="VALUE")
# parser.add_option("", "--zmax", dest="zmax", default=0, type="float", help='maximal z value the color bar is mapped to', metavar="VALUE")
# parser.add_option("", "--fzmax", dest="fzmax", default=1.0, type="float", help='set the zmax value as this fraction of the matrix maximal value (default 1)', metavar="VALUE")
parser.add_option("", "--figSize", dest="figSize", default="8,8", type="string", help='size of the figure in inch eg. 19,8. To have A4 plot type A4.' , metavar="STRING")
# parser.add_option("", "--extraTextFontSize", dest="extraTextFontSize", default=15, type="int",  help='extra texts font size (default: 15)', metavar="NUM")
parser.add_option("", "--fontSize", dest="fontSize", default=14, type="int", help='font size used for labels', metavar="VALUE")

#parser.add_option("", "--figSize", dest="figSize", default=10, type="int", help='size of the figure in inch', metavar="SIZE")
parser.add_option("", "--DPIgui", dest="DPIgui", default=70, type="int", help='DPI for plotting on the screen', metavar="NUM")
parser.add_option("", "--DPI", dest="DPI", default=70, type="int", help='DPI for saving to file', metavar="NUM")
# parser.add_option("", "--ticks", dest="ticks", default=-1, type="int", help='ticks to be plotted every this cells', metavar="NUM")
# parser.add_option("", "--xticks", dest="xticks", default=-1, type="float", help='xticks separation', metavar="VALUE")
# parser.add_option("", "--yticks", dest="yticks", default=-1, type="float", help='yticks separation', metavar="VALUE")
# parser.add_option("", "--ticksFmt", dest="ticksFmt", default="%.2f", type="string", help='default format for ticks (default: %.2f)' , metavar="STRING")
# parser.add_option("", "--Rxlabels", dest="Rxlabels", default=0, type="float", help='rotate xticklabels by this angle [deg]', metavar="VALUE")
# parser.add_option("", "--Rylabels", dest="Rylabels", default=0, type="float", help='rotate yticklabels by this angle [deg]', metavar="VALUE")
# parser.add_option("", "--ylabels", dest="ylabels", default="", type="string", help='comma separated list of yticklabels ', metavar="VALUE")
# parser.add_option("", "--title", dest="title", default='', type="string", help='plot title', metavar="STRING")
# parser.add_option("", "--xlabel", dest="xlabel", default='x', type="string", help='plot x label', metavar="STRING")
# parser.add_option("", "--ylabel", dest="ylabel", default='y', type="string", help='plot y label', metavar="STRING")
# parser.add_option("", "--zlabel", dest="zlabel", default='z', type="string", help='plot z label', metavar="STRING")
# parser.add_option("", "--maskBelow", dest="maskBelow", default=np.nan, type="float", help='disable plotting pixels with values below this value ', metavar="VALUE")
# parser.add_option("", "--bad", dest="bad", default=-1, type="float", help='disable plotting pixels with these values ', metavar="VALUE")
# parser.add_option("", "--xmin", dest="xmin", default=-1, type="float", help='minimal X value in the grid to show on X axis', metavar="VALUE")
# parser.add_option("", "--xmax", dest="xmax", default=-1, type="float", help='maximal X value in the grid to show on X axis', metavar="VALUE")
# parser.add_option("", "--ymin", dest="ymin", default=-1, type="float", help='minimal Y value in the grid to show on Y axis', metavar="VALUE")
# parser.add_option("", "--ymax", dest="ymax", default=-1, type="float", help='maximal Y value in the grid to show on Y axis', metavar="VALUE")
parser.add_option("", "--interpolation", dest="interpolation", default='nearest', type="string", help='type of interpolation to be used for plotting matrix: the allowed interpolation strings are those compatible with matplotlib eg: "nearest", "bilinear", "bicubic", "spline16", "spline36", "hanning", "hamming", "hermite", "kaiser", "quadric", "catrom", "gaussian", "bessel", "mitchell", "sinc", "lanczos" (default: nearest) ', metavar="STRING")
parser.add_option("-o", "", dest="outputFile", default='', type="string", help='name of the output file if --save option is used (default: "") ', metavar="STRING")
parser.add_option("", "--contours", dest="contours", default='', type="string", help='''a comma separated list of contours to be overplotted. 
To use different contours for every plot separate sets of contours by a colon :. Eg. for imshow with no contours and second plot with contours only, use :0.1,0.2,0.5
(default: "") ''', metavar="STRING")
parser.add_option("", "--contours_w", dest="contours_w", default=1, type="float", help='contour line width', metavar="VALUE")
parser.add_option("", "--contours_fontSize", dest="contours_fontSize", default=10, type="float", help='contour font size', metavar="VALUE")

parser.add_option("", "--dset", dest="hdf5dset", default='', type="string", help='''comma separated list of names of the datasets from the hdf5 file 
# The hdf5 dataset if it is 3d dataset saved by mscsFunction3dregc then the x-coordinate increases rightwards in the plot, and y coordinate increases downwards.
# (default: "") ''', metavar="STRING")

parser.add_option("","--corrMat", type=str, help='correlation matrix file, plots 1-sigma contours')


# parser.add_option("", "--textxy", dest="textxy",  type="string", help='print text on the plot. The text string should be: x,y,"text to be plotted"', metavar="NUM", action="append")
# parser.add_option("", "--textfxfy", dest="textfxfy",  type="string", help='print text on the plot. The text string should be: fx,fy,"text to be plotted", where fx,fy are fractions of the field size where the text should be placed', metavar="NUM", action="append")

# parser.add_option("", "--hdf5slice", dest="hdf5slice", default=0, type="int", help='for 3d grid data the slice to use along 3rd dimension (default: -1) ', metavar="INT")
# parser.add_option("", "--binX", dest="binX", default=1, type="int", help='number of cells to bin along X (this operation is done before transpose). X indicates data that are to be plotted horizontally.', metavar="NUM")
# parser.add_option("", "--binY", dest="binY", default=1, type="int", help='number of cells to bin along Y (this operation is done before transpose). Y indicates data that are to be plotted vertically.', metavar="NUM")
# parser.add_option("", "--binMethod", dest="binMethod", default="mean", type="string", help='''the how binning is done.
# By default it's just a mean value, but in case when small features are binned, their value will be much smaller. In order to preserve the 
# original signal amplitudes it may be useful to use a different binning method. Use 'max' binning method to select the maximal value
# out of the binned pixels to do that. (default: 'mean')''' , metavar="STRING")
# parser.add_option("", "--hdu", dest="hdu", default=1, type="int", help='HDU index in the fits file of which array is to be plotted', metavar="NUM")
# parser.add_option("", "--fitsSlice", dest="fitsSlice", default=-1, type="int", help='HDU multi-dimentional array (or picture) slice index of the array to be plotted', metavar="NUM")
# parser.add_option("", "--rr", dest="rr", default="", type="string", help='coma separated list of rows to be removed after the data are loaded', metavar="NUM")
# parser.add_option("", "--shiftX", dest="shiftX", default=0, type="int", help='shift periodically along X (this operation is done before after transposing). Positive values of shift will move rightwards.', metavar="NUM")
# parser.add_option("", "--shiftY", dest="shiftY", default=0, type="int", help='shift periodically along Y (this operation is done before after transposing.). Positive values of shift will move downwards. ', metavar="NUM")
# parser.add_option("", "--scaleZ", dest="scaleZ", default="1", type="string", help='Multiply all matrix values by this factor before plotting. Use comma separated list for scale by different values corresponding to different data files plotted', metavar="VALUE")
parser.add_option("", "--Bleft", dest="border_left", default=0.18, type="float", help='border size in the plot from the left', metavar="VALUE")
parser.add_option("", "--Bright", dest="border_right", default=0.02, type="float", help='border size in the plot from the right', metavar="VALUE")
parser.add_option("", "--Btop", dest="border_top", default=0.02, type="float", help='border size in the plot from the top', metavar="VALUE")
parser.add_option("", "--Bbottom", dest="border_bottom", default=0.1, type="float", help='border size in the plot from the bottom', metavar="VALUE")
parser.add_option("", "--Bhspace", dest="border_hspace", default=0.2, type="float", help='border horizontal space between the plots for multiplot mode', metavar="VALUE")
parser.add_option("", "--Bvspace", dest="border_vspace", default=0.2, type="float", help='border vertical space between the plots for multiplot mode', metavar="VALUE")
# parser.add_option("", "--circ", dest="circ", type="string",  default='', help='(DEPRECIATED, use --circle now) circles to plot defined as x,y,r. eg. --circ 10,20,5 for circle at x=10 y=20 and radii=5 This creates a new patch on a plot.', metavar="STRING")
# parser.add_option("", "--circle", dest="circle", type="string",  default='', help='A NEW extended way of plotting circles. Circles are defined by a colon separated list. Each circle is a comma separated list of parameters: x,y,r[,width[,color,[linestyle]]]. eg. --circ 10,20,5,1,r,-- for circle at x=10 y=20 and radii=5, width=1 red, dashed. This creates a new patch on a plot.', metavar="STRING")
# parser.add_option("", "--line", dest="line", type="string",  default='', help='line to plot defined as x,y,dx,dy where x,y is the center point and dx,dy offsets to the second point. eg. --line 10,20,5,6 for a line from x=10 y=20 to x=15 y=26.', metavar="STRING")
# parser.add_option("", "--rect", dest="rect", type="string",  default='', help='rectangles to plot defined as x,y,dx,dy where x,y is the center point and dx,dy width,height. eg. --rect 10,20,5,6 for a rectangle at x=10 y=20 and width=5 and height=6. .', metavar="STRING")
# parser.add_option("", "--ellipse", dest="ellipse", type="string",  default='', help='circles to plot defined as x,y,rx,ry,ang. eg. --circ 10,20,5,4,20 for ellipse at x=10 y=20 and radiix=4 and radiiy=4, tiled 20 deg to x axis, This creates a new patch on a plot.', metavar="STRING")
parser.add_option("", "--lc", dest="lc",  type="string", help='line color to be used for plotting dataset. (default order is: b,g,r,c,m,y,k,b,g,r,c,m,y,k,b,g,r,c,m,y,k)', metavar="STRING", action="append")
parser.add_option("", "--gc", dest="gc",  type="string", help='grid line color to be used for plotting dataset. (default order is: k)', metavar="STRING", action="append")
parser.add_option("", "--CM", dest="CM",  type="string", default='hot', help='''color palette to be used. Interesting choices are 
    hot, spectral, jet, afmhot, jet, none (default: "hot")''', metavar="STRING" )
# parser.add_option("", "--cut", dest="cut",  default="", type="string", help='x1,x2,y1,y2 pixel numbers to cut a rectangle before plotting. This operation is done first. (default>: '')', metavar="STRING")
parser.add_option("", "--contcolor", dest="contcolor",  type="string", default='k', help='''comma separated list of contour colors to be usef for every plot (default: "k")''', metavar="STRING" )
# parser.add_option("", "--colorbarPad", dest="colorbarPad",  type="float", default=0.05, help='''colorbar padding (default: 0.15)''', metavar="FLOAT" )
parser.add_option("", "--aspect", dest="aspect",  type="string", default="auto", help='''sets axes aspect ratio (default: "")
Possible values are: auto, equal, normal or num = number''', metavar="FLOAT" )
parser.add_option("", "--scaleExtent", dest="scaleExtent", default=1, type="float", help='rescale the extent of the axes range -- this affects tick labels calculation', metavar="VALUE")
parser.add_option("", "--scaleX", default=1, type="float", help='rescale the extent of the X axis -- this affects tick labels calculation. It also scales the best fit parameter', metavar="VALUE")
parser.add_option("", "--XunitPrefix", default='', type="string", help='add this prefixt to X axis unit description (useful when scaling by e.g 1000, you can add "m" for milli for example)', metavar="VALUE")
parser.add_option("", "--scaleY", default=1, type="float", help='rescale the extent of the Y axis -- this affects tick labels calculation. It also scales the best fit parameter', metavar="VALUE")
parser.add_option("", "--YunitPrefix", default='', type="string", help='add this prefixt to Y axis unit description (useful when scaling by e.g 1000, you can add "m" for milli for example)', metavar="VALUE")


# switches
# parser.add_option("", "--centerXextent", action="store_true", dest="centerXextent", default=False, help='''
# Changes X ticks of the plot subtracting a value so that the center of the image is at Xtick 0. Useful when --xmin and --xmax are read from hdf5 file.''')
# parser.add_option("", "--centerYextent", action="store_true", dest="centerYextent", default=False, help='''
# Changes Y ticks of the plot subtracting a value so that the center of the image is at Ytick 0. Useful when --ymin and --ymax are read from hdf5 file.''')
parser.add_option("", "--grid", action="store_true", dest="grid", default=False, help="triggers showing the grid on plot")
parser.add_option("", "--show", action="store_true", dest="show", default=False, help="triggers showing the plot")
parser.add_option("", "--dump", action="store_true", dest="dump", default=False, help="triggers dumping data to file")
# parser.add_option("", "--colorbar", action="store_true", dest="colorbar", default=False, help="triggers showing a color bar")
# parser.add_option("", "--zrangeSym", action="store_true", dest="zrangeSym", default=False, help="triggers showing z-range to be within the -max(abs(zmin),abs(zmax)) and +max(abs(zmin),abs(zmax)) ")
# parser.add_option("", "--enumSlices", action="store_true", dest="enumSlices", default=False, help="triggers enumerating slices in the plot title by the slice number")
# parser.add_option("", "--makeMovie", action="store_true", dest="makeMovie", default=False, help="triggers making movie from the slices")
# parser.add_option("", "--maskBad", action="store_true", dest="maskBad", default=False, help="triggers masking bad pixels")
# parser.add_option("", "--plotSpecial1", action="store_true", dest="plotSpecial1", default=False, help="plot special block1")
parser.add_option("", "--flipY", action="store_true", dest="flipY", default=False, help="triggers showing the Y axis flipped along with the data")
# parser.add_option("", "--flipHDFylabels", action="store_true", dest="flipHDFylabels", default=False, help="triggers loading ymin as ymax and ymax as ymin from hdf file. Only used along with option --hdf5readfndata")
parser.add_option("", "--flipX", action="store_true", dest="flipX", default=False, help="triggers showing the X axis flipped along with the data")
parser.add_option("", "--transposeData", action="store_true", dest="transposeData", default=False, help="transposes the data matrix before plotting it")
# parser.add_option("", "--hdf5", action="store_true", dest="hdf5", default=False, help="indicates that the input file is in hdf5 format")
# parser.add_option("", "--fits", action="store_true", dest="fits", default=False, help="indicates that the input file is in fits format")
# parser.add_option("", "--hdf5dump", action="store_true", dest="hdf5dump", default=False, help="indicates to dump data to txt file as matrix")
# parser.add_option("", "--hdf5zscramble", action="store_true", dest="hdf5zscramble", default=False, help="indicates to Zscramble data from all slices defined by --st and --en options")
# parser.add_option("", "--hdf5zmaximize", action="store_true", dest="hdf5zmaximize", default=False, help="indicates to maximize the hdf5 data from all slices defined by --st and --en options")
# parser.add_option("", "--hdf5zsum", action="store_true", dest="hdf5zsum", default=False, help="indicates to sum data from all slices defined by --st and --en options along z direction")
# parser.add_option("", "--hdf5readfndata", action="store_true", dest="hdf5readfndata", default=False, help="indicates to load the mscsFunction3dregc data stored in the hdf5keys to setup the axes")
# parser.add_option("", "--log", action="store_true", dest="log", default=False, help="triggers log plot of matrix values")
# parser.add_option("", "--abs", action="store_true", dest="abs", default=False, help="triggers absolute value plot of matrix values")
# parser.add_option("", "--useNewAxes", action="store_true", dest="useNewAxes", default=False, help='''for circles plotting, this allows to treat the 
# given circle coordinates as the coordinates recalculated according to the provided xmin xmax etc and not as the pixel numbers.
# The circle center will be placed where you asked according to the specified axes ranges. You must take care that the plotted signal,
# coincides with these new coordinates orientation by using apropriate matrix transformations like --flip[XY] or --transpose options.
# Typically inverting vertical axes may be needed (--flipY) when ymin > ymax to force y-values increase upwards.''')
# parser.add_option("", "--joinPlots", action="store_true", dest="joinPlots", default=False, help="do not close figure (plot) after every plot. Plot data on the same plot (useful for eg image + contours on the same plot)")




cpedsPythCommon.saveHowWeWereCalled()

(option, args) = parser.parse_args()

def loadHDF5_1d_CR(fname,dset):
    f=h5py.File(fname,'r')

    if getLikelihoofTypeFromHDF(fname, dset)=='1d':
        CR=f[dset+"_CR"].value.T[0]
    
    f.close()
    return CR
    
def loadHDF5CRlevels(fname,dset):
    f=h5py.File(fname,'r')

    if getLikelihoofTypeFromHDF(fname, dset)=='2d':
    
#     print f.attrs.keys()
        CLcontour=[None,None,None] # these should increase
        
        for item in list(f[dset].attrs.keys()):
    #         print item
            if item=="CLcontour68":
                CLcontour[2]=f[dset].attrs[item]
            elif item=="CLcontour95":
                CLcontour[1]=f[dset].attrs[item]
            elif item=="CLcontour99":
                CLcontour[0]=f[dset].attrs[item]
    
    return CLcontour

def loadParameterNames(fname,dset):
    plot_labels=[]
    f=h5py.File(fname,'r')
    if getLikelihoofTypeFromHDF(fname, dset)=='1d':
        plot_labels=f[dset].attrs['full_name'].decode()
    elif getLikelihoofTypeFromHDF(fname, dset)=='2d':
        plot_labels=[f[dset].attrs['full_name_x'].decode(),    f[dset].attrs['full_name_y'].decode()]
    f.close()
    return plot_labels
    
def loadBestFitParameters(fname, dset):
    bf=[]
    f=h5py.File(fname,'r')
    if getLikelihoofTypeFromHDF(fname, dset)=='1d':
        bf=f[dset].attrs['bestFit']
    elif getLikelihoofTypeFromHDF(fname, dset)=='2d':
        bf=[f[dset].attrs['bestFit_x'],    f[dset].attrs['bestFit_y']]
    f.close()
    return bf
        
        
def loadHDF5fnData(fname,dset):
#    x0=np.array([])
#    xMax=np.array([])
#    y0=np.array([])
#    yMax=np.array([])
    
    f = h5py.File(fname,'r')
    x0 = f[dset].attrs['x0']
    xMax = f[dset].attrs['xMax']
    y0 = f[dset].attrs['y0']
    yMax = f[dset].attrs['yMax']

    return x0,xMax,y0,yMax

def getFileExtension(fname):
    ext=fname.split('.')
#    print ext
#    sys.exit()
    return ext[-1]

def loadData1D(fname,dset):
    sliceNo=0
#     dset='L'
    print("* loading file: %s (slice: %li)" % (fname,sliceNo))
    
    f = h5py.File(fname,'r')
    slice = f[dset].value[:]
    f.close()        
    # convert the ordering of the slice to make first dimention (x) increase rightwards and second dimention (y) increase downwards
    slice=slice.T
    print(slice)

            
    #
    # read contours
    #   
    CR=loadHDF5_1d_CR(fname, dset)
    print("Read CL contours:")
    print(CR)
    
    #
    # load plot labels
    #
    plot_labels=loadParameterNames(fname, dset)
    print("Parameter names:")
    print(plot_labels)
    
    #
    # load plot labels
    #
    bfparams=loadBestFitParameters(fname, dset)
    print("Best fit parameters:")
    print(bfparams)


    print()
    print("    * data size after loading and trimming: %i rows %i cols" % (len(slice[:,0]),len(slice[0])))
    print()
    return slice,CR,plot_labels,bfparams
    

def loadData2D(fname,dset):
    sliceNo=0
#     dset='L'
    print("* loading file: %s (slice: %li)" % (fname,sliceNo))
    
    f = h5py.File(fname,'r')
    slice = f[dset].value[:,:,sliceNo]
    f.close()        
    # convert the ordering of the slice to make first dimention (x) increase rightwards and second dimention (y) increase downwards
    slice=slice.T

    #
    # read data ranges    
    #
    slice_ranges=loadHDF5fnData(fname,dset)
    
#     if option.flipHDFylabels:
#         option.ymin=ymax
#         option.ymax=ymin
            
    print('Read matrix ranges xmin,xmax,ymin,ymax: ',slice_ranges)
     
    #
    # read contours
    #   
    CLcontours=loadHDF5CRlevels(fname, dset)
    CLcontours.append(1.0)
    print("Read CL contours:")
    print(CLcontours)
    
    #
    # load plot labels
    #
    plot_labels=loadParameterNames(fname, dset)
    print("Parameter names:")
    print(plot_labels)
    
    #
    # load plot labels
    #
    bfparams=loadBestFitParameters(fname, dset)
    print("Best fit parameters:")
    print(bfparams)


    print()
    print("    * data size after loading and trimming: %i rows %i cols" % (len(slice[:,0]),len(slice[0])))
    print()
    return slice,slice_ranges,CLcontours,plot_labels,bfparams
    

def plot_confidence_ellipse(fig,Cmat,bfparams):
    p1=lambda C: (C[0][0]+C[1][1])/2
    p2=lambda C: math.sqrt((C[0][0]-C[1][1])**2/4+C[0][1]**2)
    sizX=lambda C: math.sqrt(p1(C)+p2(C))
    sizY=lambda C: math.sqrt(p1(C)-p2(C))
    
    angle=math.atan(2.*Cmat[0][1]/(Cmat[0][0]-Cmat[1][1]))/2
    A=sizY(Cmat)
    B=sizX(Cmat)

    
    
    
    sx2=Cmat[0][0]
    sy2=Cmat[1][1]
    A2=0.5*(sx2+sy2+(sx2-sy2)/np.cos(angle))
    B2=0.5*(sx2+sy2+(sy2-sx2)/np.cos(angle))
    A=np.sqrt(A2)
    B=np.sqrt(B2)

    '''
    The 2-D confidence region along a given parameter direction is broader
    by a factor 
    
    Solve[Integrate[f[r] r, {r, 0, x}]/
       Integrate[f[r] r, {r, 0, \[Infinity]}] == Erf[Nsigma/Sqrt[2]], x]
       
    which gives x=Sqrt[-2 Log[Erfc[Nsigma/Sqrt[2]]]]
    
    
    '''
    alpha68=1.52 # Sqrt[-2 Log[Erfc[Nsigma/Sqrt[2]]]], where Nsigma=1
    alpha95=2.48598
    A68=A*alpha68
    B68=B*alpha68

#     angle=0.7*math.pi/180
    print('A: {}, B: {}, angle: {}'.format(A68,B68,angle*180./math.pi))
    e1 = Ellipse((bfparams[0], bfparams[1]), width=2*A68, height=2*B68,
                         angle=angle*180./math.pi, linewidth=2, fill=False, zorder=2,
                         color='m', ls='--', label='Fisher 1-$\sigma$')

    A95=A*alpha95
    B95=B*alpha95

    e2 = Ellipse((bfparams[0], bfparams[1]), width=2*A95, height=2*B95,
                         angle=angle*180./math.pi, linewidth=2, fill=False, zorder=2,
                         color='m', ls='--', label='Fisher 2-$\sigma$')


#     e1 = Ellipse((bfparams[0], bfparams[1]), width=A, height=2*B,
#                          angle=3.7, linewidth=2, fill=False, zorder=2,
#                          color='m', ls='--', label='Fisher')
#     e2 = Ellipse((bfparams[0], bfparams[1]), width=A, height=2*B,
#                          angle=45, linewidth=2, fill=False, zorder=2)
    ax=gca()
    ax.add_patch(e1) 
    ax.add_patch(e2) 
#     ax.set_aspect('equal')
   

def plotData1D(XY,CR, plot_label, bfparam, plotNo):
    if option.figSize=="A4":
        option.figSize='11.6929,8.2677'
    else:
        figSize=cpedsPythCommon.getFloatList(option.figSize)

    fig=figure(figsize=figSize)
#     fig=figure(figsize=figSize, dpi=option.DPIgui)
    ax=subplot(111)
    fig.subplots_adjust(left=option.border_left, right=1-option.border_right, top=1-option.border_top, bottom=option.border_bottom,  hspace=option.border_vspace, wspace=option.border_hspace)

#     CS=contour(mat,CRcontours,linewidths=option.contours_w,colors=option.contcolor[plotNo % len(option.contcolor)], extent=mat_ranges)
    plot(XY[:,0],XY[:,1],linewidth=option.contours_w, zorder=1, label='reconstructed 1-d likelihood')
#     ax=gca()
#     ax.axis(mat_ranges)
#     plot_label=plot_label
    xlabel(plot_label, fontsize=option.fontSize)
    ylabel('L', fontsize=option.fontSize)


    # plot CR95
    axvspan(CR[1][1],CR[1][2], zorder=0, color='g', alpha=0.5)
    # plot CR68
    axvspan(CR[0][1],CR[0][2], zorder=0, color='g', alpha=0.5)

    # plot bf params
    
    axvline([bfparam], color='b')
    
    

    if option.fontSize>0:
        setp( ax.get_xticklabels(), fontsize=option.fontSize)
        setp( ax.get_yticklabels(), fontsize=option.fontSize)
    else:
        print('switching off xlabels')
        ax.set_xticklabels([])
        ax.set_yticklabels([])

    if option.grid:
        grid(True, color=option.gc[0])


    return fig
    



def plotData2D(mat,mat_ranges,CRcontours, plot_labels, bfparams, plotNo):
    if option.figSize=="A4":
        option.figSize='11.6929,8.2677'
    else:
        figSize=cpedsPythCommon.getFloatList(option.figSize)

    fig=figure(figsize=figSize)
#     fig=figure(figsize=figSize, dpi=option.DPIgui)
    ax=subplot(111)
    fig.subplots_adjust(left=option.border_left, right=1-option.border_right, top=1-option.border_top, bottom=option.border_bottom,  hspace=option.border_vspace, wspace=option.border_hspace)

#     CS=contour(mat,CRcontours,linewidths=option.contours_w,colors=option.contcolor[plotNo % len(option.contcolor)], extent=mat_ranges)
    CS=contourf(mat,CRcontours,linewidths=option.contours_w, extent=mat_ranges,
                colors=['g','y','r'], alpha=0.5, label='reconstructed CRs')
#     ax=gca()
#     ax.axis(mat_ranges)

    xlabel(plot_labels[0], fontsize=option.fontSize)
    ylabel(plot_labels[1], fontsize=option.fontSize)


    # plot bf params
    
    plot([bfparams[0]],[bfparams[1]], marker='*', color='b', markersize=10)

    if option.fontSize>0:
        setp( ax.get_xticklabels(), fontsize=option.fontSize)
        setp( ax.get_yticklabels(), fontsize=option.fontSize)
    else:
        print('switching off xlabels')
        ax.set_xticklabels([])
        ax.set_yticklabels([])

    if option.grid:
        grid(True, color=option.gc[0])


    return fig

if type(option.gc)!=type(list()):    option.gc=list(['k'])

def getLikelihoofTypeFromHDF(fname,dset):
    if '-' in dset:
        return '2d'
    return '1d'


def plot_normed_gauss(X,m, sigma,fig):
    Y=np.exp(-np.power(X-m,2)/(2.*sigma**2))
    plot(X,Y,'--', label='Fisher', color='m', lw=2)

def plot1Dlikelihood(fname,option):
    XY,CR,plot_labels,bfparam=loadData1D(fname, option.hdf5dset)
    if option.dump:
        np.savetxt('L.dump', XY)

#     if option.scaleX!=1.:
#         ran=ran[0]*option.scaleX,ran[1]*option.scaleX,ran[2],ran[3]
#         bfparams[0]*=option.scaleX
#     if option.XunitPrefix!='':
#         plot_labels[0]=plot_labels[0].replace('[','['+option.XunitPrefix)


    fig=plotData1D(XY,CR,plot_labels,bfparam,matID)

    
    if option.corrMat:
        Cmat=np.loadtxt(option.corrMat)
        X=np.linspace(min(XY[:,0]), max(XY[:,0]), 200)
        plot_normed_gauss(X, m=bfparam, sigma=np.sqrt(Cmat[int(option.hdf5dset)][int(option.hdf5dset)]),
                          fig=fig)
    
    legend()


    if option.outputFile!='':
        outputFile=option.outputFile
    else:
        outputFile='.'.join(fname.split('.')[0:-1])+'.eps'
    print('Saving to file:',outputFile)
    fig.savefig(outputFile, dpi=option.DPI)

    if option.show:
        show()

    
def plot2Dlikelihood(fname,option):
    mat,ran,CRcontours,plot_labels,bfparams=loadData2D(fname, option.hdf5dset)
    
    if option.scaleX!=1.:
        ran=ran[0]*option.scaleX,ran[1]*option.scaleX,ran[2],ran[3]
        bfparams[0]*=option.scaleX
    if option.XunitPrefix!='':
        plot_labels[0]=plot_labels[0].replace('[','['+option.XunitPrefix)

    if option.scaleY!=1.:
        ran=ran[0],ran[1],ran[2]*option.scaleY,ran[3]*option.scaleY
        bfparams[1]*=option.scaleY
    if option.YunitPrefix!='':
        plot_labels[1]=plot_labels[1].replace('[','['+option.YunitPrefix)
        
    fig=plotData2D(mat,ran,CRcontours,plot_labels,bfparams,matID)

    
    if option.corrMat:
        Cmat=np.loadtxt(option.corrMat)
        plot_confidence_ellipse(fig,Cmat,bfparams)
    
    
    legend()

    if option.outputFile!='':
        outputFile=option.outputFile
    else:
        outputFile='.'.join(fname.split('.')[0:-1])+'.eps'
    print('Saving to file:',outputFile)
    fig.savefig(outputFile, dpi=option.DPI)

    if option.show:
        show()
    
###########################################################################################
###########################################################################################
###########################################################################################
# MAIN PROGRAM
###########################################################################################
###########################################################################################
###########################################################################################

matID=0
for (fname,matID) in zip(args,list(range(len(args)))):
    ext=getFileExtension(fname)
    
    
    if ext=='hdf5' or ext=='hdf':
        Ltype=getLikelihoofTypeFromHDF(fname,option.hdf5dset)

        if Ltype=='2d':
            plot2Dlikelihood(fname,option)
            
        elif Ltype=='1d':
            plot1Dlikelihood(fname,option)

    else:
        print('I do not recognize this extension. Supported extensions are: hdf and hdf5')
        sys.exit(1)
    