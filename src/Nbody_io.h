/*!
 * \file Nbody_io.h - implements number of classes to handle various IO file formats for Gadget-2
 * and Graphic2 programs
 *
 *  Created on: Jan 3, 2011
 *      Author: blew
 */

#ifndef NBODY_IO_H_
#define NBODY_IO_H_

/* **************************************************************************************************** */
/* INCLUDES */
/* **************************************************************************************************** */

/* STANDALONE HEADERS */
#include <string>
#include <stdint.h>
#include "cpeds-math.h"
#include "cpeds-msgs.h"
#include "Mscs-function3dregc.h"

/* INTERDEPENDENT HEADERS */

/* FORWARD DECLARATIONS */

/* USING NAMESPACES (only for inside-header files implementations) */
using namespace std;





/* **************************************************************************************************** */
/* CLASS DECLARATION */
/* **************************************************************************************************** */
/*!
 \class 
 \brief Encapsulates loading initial conditions files generated by graphic2 program
 and saving in Gadget-2 format.
 \details 
 
 
 \date Jan 3, 2011, 3:33:05 PM 
 \author Bartosz Lew
 */

class Nbody_io  {
	public:

		typedef struct {
			int      npart[6];
			double   mass[6];
			double   time;
			double   redshift;
			int      flag_sfr;
			int      flag_feedback;
			unsigned int      npartTotal[6];
			int      flag_cooling;
			int      num_files;
			double   BoxSize;
			double   Omega0;
			double   OmegaLambda;
			double   HubbleParam; // unitless: h
			int flag_stellarage;                 /*!< flags whether the file contains formation times of star particles */
			int flag_metals;                     /*!< flags whether the file contains metallicity values for gas and star particles */
			unsigned int npartTotalHighWord[6];  /*!< High word of the total number of particles of each type */
			int  flag_entropy_instead_u;         /*!< flags that IC-file contains entropy instead of u */
			char fill[60];	               /*!< fills to 256 Bytes */

//			char     fill[256- 6*4- 6*8- 2*8- 2*4- 6*4- 2*4 - 4*8];  /* fills to 256 Bytes */
		} gadget_snapshot_file_header_t;

		typedef struct {
			float  Pos[3];
			float  Vel[3];
			float  Mass;
			int    Type;
			float  Rho, U, Temp, Ne;
		} gadget_particle_data_t;

		typedef struct {
			int  size;
//			char ID[4];
			string ID;
			int next;
			int size_check;
			long sizeFactor; //!< this indicates how many itmes the size of this block is larger than npart * float (eg. 1 for mass, 3 for coordinates)
		} gadget_snapshot_type2_block_t;
		
		
		typedef struct {
			uint32_t n1, n2, n3;
			float dx, o1, o2, o3; // dx - cell side length in Mpc
			float astart, omegam, omegav, H0;
		} grafic_level0_header_t;
		
		
		//! this structure should be consistent with the one defined in the grafic.hpp file of the grafic package modified by BL
		//! this structure contains all the parameters that are not stored in the standard output files generated by grafic program.
		typedef struct {
			double astart;
			double zstart;
			long seed;
		} grafic_program_parameters_t;

		typedef struct {
			double Wb,Wcdm,Wm,Wl;
			double H0; // km/s/Mpc
			double sigma8,ns,Tcmb;
		} grafic_cosmoData_t;

		typedef enum { Header, MIN, Coordinates=MIN, Velocities, ParticleIDs, Masses, InternalEnergy, Rho, SmoothingLength, MAX=SmoothingLength , Acceleration, Temperature } gadget_IC_blocks;

		/***************************************************************************************/		
		
		/******************************************************************************************/
		/* FOF, TIPSY FORMAT DEFINITIONS                                                          */
		/******************************************************************************************/
		typedef struct {
		    float mass;
		    float pos[3];
		    float vel[3];
		    float rho;
		    float temp;
		    float hsmooth;
		    float metals ;
		    float phi ;
		} tipsy_gas_particle_t;


		typedef struct {
		    float mass;
		    float pos[3];
		    float vel[3];
		    float eps;
		    float phi ;
		} tipsy_dark_particle_t;


		typedef struct  {
		    float mass;
		    float pos[3];
		    float vel[3];
		    float metals ;
		    float tform ;
		    float eps;
		    float phi ;
		} tipsy_star_particle_t;


		typedef struct {
		    double time ; // scale factor
		    int nbodies ; // total particles count
		    int ndim ; // number of dimensions
		    int nsph ; // baryon  (gas) particles count
		    int ndark ; // cdm particles count
		    int nstar ; // star particles count
		} tipsyHeader_t;



//		typedef struct tipsyParticle {
//			float fMass;
//			float r[3];
//			float v[3];
//			int iGroup;
//			int iOrder;
//			} tipsyPARTICLE;
//
//		typedef struct tipsybndBound {
//			float fMin[3];
//			float fMax[3];
//			} tipsyBND;
//
//		typedef struct tipsykdNode {
//			float fSplit;
//			tipsyBND bnd;
//			int iDim;
//			int pLower;
//			int pUpper;
//			} tipsyKDN;

//		typedef struct tipsykdContext {
//			int nBucket;
//			int nParticles;
//			int nDark;
//			int nGas;
//			int nStar;
//			int bDark;
//			int bGas;
//			int bStar;
//			int nActive;
//			float fTime;
//			float fPeriod[3];
//			float fCenter[3];
//			int nLevels;
//			int nNodes;
//			int nSplit;
//			tipsyPARTICLE *p;
//			tipsyKDN *kdNodes;
//			int nGroup;
//			int uSecond;
//			int uMicro;
//			} * tipsyKD;

		/***************************************************************************************/		
		
		
		Nbody_io();
		virtual ~Nbody_io();
		/***************************************************************************************/		
		/*!
			\brief load data from the gadget snapshot file(s)
			\details 
			@param fname - file name
			@param n - number of files in the snapshot
			@param fileType - Gadget2 file format type
			@return the cpeds status code is returned 
		
			\date Jan 3, 2011, 11:51:23 PM
			\author Bartosz Lew
		*/
		cpedsStatusCodes loadGadgetSnapshot(string fname, long files, int fileType=1);
		cpedsStatusCodes saveGadgetSnapshot(string fname, long n);
		
		/*!
			\brief  load gadget type 2 snapshot data into object in particle-type major ordering
			\details 
			@param fname - file name
			@param n - number of files in the snapshot
			@return the cpeds status code is returned 
		
			\date Jul 27, 2011, 8:46:22 PM
			\author Bartosz Lew
		*/
		cpedsStatusCodes loadGadgetSnapshotOrd(string fname, long files);

		/*!
			\brief return information on i'th particle from the shapshot file.
			\details 
			@param i - particle index to see (starts with 0)
			@return

			If the snapshot file was loaded with loadGadgetSnapshot method then
			the ordering of particles is that first are indexed gas particles, then halo particles.
			The ordering is snapshot file minor - i.e. first are indexed all particles of all types
			from the same snapshot file, and then all particles from other files of the same snapshot.

			If this is not what you want then use a different method for loading data into the object.
			For example loadGadgetSnapshotOrd.
					
			\date Jul 27, 2011, 8:24:19 PM
			\author Bartosz Lew
		*/
		gadget_particle_data_t getParticle(long i) { return P[i]; }
		gadget_snapshot_file_header_t& getGadgetSnapshotHeader() { return gadget_header; }
		tipsyHeader_t& getTipsySnapshotHeader() { return tipsyHeader; }
		tipsy_dark_particle_t getTipsyDMparticle(long i) { return tipsyPdark[i]; }
		tipsy_gas_particle_t getTipsyGasParticle(long i) { return tipsyPgas[i]; }
		
		
		long getParticlesCountGas() { return gadget_header.npartTotal[0]; }
		long getParticlesCountHalo() { return gadget_header.npartTotal[1]; }
		long getParticlesCount() { return getParticlesCountGas()+getParticlesCountHalo(); }
		
		/*!
			\brief returns the header block of the gadget type 2 snapshot file
			\details 
			@param fname - name of the snapshot file
			@param infoBlk - information on the read block
			@return header structure
		
			\date Oct 25, 2011, 7:09:28 PM
			\author Bartosz Lew
		*/
		Nbody_io::gadget_snapshot_file_header_t readGadgetHeader(string fname, Nbody_io::gadget_snapshot_type2_block_t &infoBlk);
		
		/*!
			\brief loads a block of data from a gadget type 2 snapshot file
			\details 
			@param fname - name of the snapshot file
			@param blockName - name of the block ( up to 4-chars string defining the block)
			@param particleType - type of particle data to read (0 - gas, 1 - halo)
			@param infoBlk - information on the read block
			@param npart - number of particles in the returned vector. The size of the vector is npart*infoBlk.sizeFactor.\n The size factor is 1 for
			mass, density etc, and 3 for POS and VEL blocks
			@return an array of floats of size or NULL if the block was not found

		
		
			Currently only particleType of 0 and 1 are supported. 
			
			\date Jul 26, 2011, 3:54:27 PM
			\author Bartosz Lew
		*/
		float* readGadgetBlock(string fname, string blockName, int particleType, 	long* npart, gadget_snapshot_type2_block_t &infoBlk);

		mscsVector<float> readGadgetBlockVec(string fname, long Nfiles, string blockName, int particleType, gadget_snapshot_type2_block_t &infoBlk);

		/*!
			\brief this function extracts requested data from the gadget snapshot file(s) and stores to txt files
			\details 
			@param fname - snapshot file name, and snapshot file name prefix in case of multiple files per snapshot
			@param files - number of files in the snapshot
			@param data - requested data identifier
			@param fileType - defines the gadget2 snapshot files format (either 1 or 2 currently)
			@return
			
			HDF format is not supported at the moment.
			The output txt files will have the name same as the corresponding binary data file with the suffix ".txt"
		
		
			\date Feb 16, 2011, 1:02:32 PM
			\author Bartosz Lew
		*/
		cpedsStatusCodes dumpGadgetSnapshotData(string fname, int files, int fileType=1, gadget_IC_blocks data=MIN, string outputDir="./");
		
		
		/*!
			\brief calculates and saves density weighted temperature given gadget snapshot file
			\details 
			@param fname - input file name
			@param saveOpts - save method modifier.\n
			 	 0 - (default) save Trho \n
			 	 1 - save temperature only\n
			@param files - number of files in this snapshot
			@param fileType - defines the gadget2 snapshot files format (either 1 or 2 currently)
			@param Wb0 -  baryon density parameter (this should be in gadget header but in version 2 it's not. If only temperature is needed then 
			this parameter is not used. It is only used for density weighted temperature
			@param outputFile - output file name
		
			\date Feb 28, 2013, 1:44:35 PM
			\author Bartosz Lew
		*/
		void dumpDensityWeightedTemperature(string fname, int files, int fileType, double Wb0, int saveOpts, string outputFile);
		
		/*!
			\brief dump gadget snampshot to tipsy file format
			\details 
			@param fname - gadget snapshot file prefix
			@param files - number of files in this snapshot
			
			This currently supports only gadget type 2 files and tipsy native file format.
			The fileds that do not exist in gadget file will be set as zero 
			(these are: eps, phi, metals, hsmooth, temp, and rho in case of dark matter 
			particles. Gadget does not calculate the density for the DM particles ).
			
			The mass is currently assumed to be the same for all particles of the same type,
			and it is read from the header of the gadget file
		
			\date Jul 27, 2011, 12:26:53 PM
			\author Bartosz Lew
		*/
		cpedsStatusCodes dumpGadgetSnapshot2Tipsy(string fname, int files);

		/*!
			\brief loads data from tipsy file
			\details 
			@param fname - tipsy file name
			@return
			
			The file structure is as follows:
			
			tipsy header
			
			gas particles data

			cdm particles data
			
		
			\date Nov 1, 2013, 3:01:37 PM
			\author Bartosz Lew
		*/
		cpedsStatusCodes loadTipsy(string fname);
		
		/*!
			\brief load data from the directory containing the initial conditions generated by the grafic package
			\details 
			@param dirname - the directory name containing the IC files
			@return the cpeds status code is returned 

			The directory should contain the following files:\n
			ic_deltab \n
			ic_velbx \n
			ic_velby \n
			ic_velbz \n
			ic_velcx \n
			ic_velcy \n
			ic_velcz \n
			
			that were generated by the grafic program.
			
			
			The grafic IC file structure is the following:\n
			
			int32_t\n
			header\n
			int32_t\n
			
			slice1Size in bytes( of type int32_t )\n
				slice1 of size header.n1 x header.n2\n
			slice1Size in bytes ( of type int32_t )
			
			slice2Size in bytes ( of type int32_t )\n
				slice2 of size header.n1 x header.n2\n
			slice2Size in bytes ( of type int32_t )
			
			.\n
			.\n
			.\n
			
			sliceN3Size in bytes ( of type int32_t )\n
				sliceN3 of size header.n1 x header.n2\n
			sliceN3Size in bytes ( of type int32_t )
			where N3 = header.n3
			
			The slices are of either double of float types depending on the sliceSize (stored in bytes) and header.n[123] 
			information.
			
			
			\date Jan 3, 2011, 11:52:33 PM
			\author Bartosz Lew
		*/
		cpedsStatusCodes loadGraficICsDensity(string dirname);
		
		
		/*!
			\brief converts the initial conditions generated by grafic program into the gadget-2 snapshot file
			\details 
			@param dirname - directory name with the IC files generated by grafic
			@param outfile - IC file name for gadget-2
			@param gadgetICformat - gadget file format. The numbers are consistent with the gadget-2 
			user's guide documentation:\n 
				1 - default file format consistent with gadget-1\n
				2 - gadget-2 file format with the block name strings - NOT SUPPORTED YET
				3 - HDF5 file format - NOT SUPPORTED YET
			@return status code
		
			\date Jan 6, 2011, 4:59:32 PM
			\author Bartosz Lew
		*/
		cpedsStatusCodes convertGraficToGadgetIC(string dirname, string outfile, int gadgetICformat=1, int fileNum=1);
		// WARNING: !! this is not fully debuged
		cpedsStatusCodes convertGadgetToGadget2(string fname, string outfile, long Nfiles, bool ic=false);

		/*!
			\brief this method saves data stored in the matrix into the Gadget2 binary format.
			\details 
			@param data - matrix with the data to store
			@param particleType - defines the gadget particle type: 0 - gas, 1 - cdm
			@param boxSize - box size in the proper code units
			@param T - temeprature of the particles
//			@param fname - gadget2 file name 
			@return
			
			Each row from the matrix represents one SPH particle. The columns define: 
				x,y,z - positions
				vx,vy,vz - velocities
				m - mass
				
				
			The data will be stored as
		
			\date Feb 18, 2011, 6:31:25 PM
			\author Bartosz Lew
		*/
		cpedsStatusCodes writeGadget2data(matrix<double>& data, string fname, double boxSize, int particleType=0);

		/*!
			\brief this method saves data provided in the c-arrays into the Gadget2 binary format.
			\details 
			@param fname - gadget2 file name 
			@param gadget_header - reference to a header of the gadget file to write
			@param particleType - defines the gadget particle type: 0 - gas, 1 - cdm
			@param particleNum - number of particles in the arrays (not multiplied by the size factor)
			@param POS, VEL, MASS, U, RHO - arrays with particle data to be saved
			@return
		
			\date Oct 25, 2011, 8:48:19 PM
			\author Bartosz Lew
		*/
		cpedsStatusCodes writeGadget2data(string fname, Nbody_io::gadget_snapshot_file_header_t& gadget_header, int particleType, long particleNum, float* POS, float* VEL, float* MASS,float* U=NULL, float* RHO=NULL );

		const mscsFunction3dregc& getICDensityData() const { return ICdata; }

		/*!
			\brief velocity factor that converts from grafic velocities to gadget velocities that go into IC file
			\details 
			@return returns the velocity pre-factor that is used to calculate the particle
			velocity in gadget internal units (default [km/s])
			The factor is simply 1/(sqrt(a_start)*h) - this is  changed now
						
			\date Apr 6, 2011, 7:40:26 PM
			\author Bartosz Lew
			

			UPDATED ON: Apr 14, 2011, 4:50:44 PM
			In grafic the velocity and displacement are related as:
				velocity (proper km/s) =  Displacement (comoving Mpc at astart) * vfact.
				vfact = dln(D+)/dtau where tau=conformal time.

			Grafic calculates: "The velocity (for ic_velbx, etc.) is the peculiar velocity in units of proper km/s at astart."
			
			The 1/h factor in fact is completely unjustified in this formula and was put by hand to numerically match Padme simulations in terms 
			of velocity histogram dispersion.
			But in fact since grafic outputs proper peculiar velocities u in km/s then
			the conversion to coordinate velocities v in km/s is: v= u / gamma, where gamma is the Lorentz factor: gamma= 1/sqrt(1-(v/c)^2), so
			v = c u / sqrt(c^2 + u^2). In practise for u of order O(10)
			u and v are almost the same as u << c (the speed of light) and so coordinate and proper velocities are assumed to be equal.
			Then gadget internal velocities v_g are related to peculiar velocities v as
			v_g = v/sqrt(a_start).
			The factor 1/sqrt(a_start) is exactly what this method returns.
			
			
		*/
		double getGadgetVelocityFactor() { 	return 1/( sqrt(grafic_program_parameters.astart)); }
//		double getGadgetVelocityFactor() { 	return 1/( sqrt(grafic_program_parameters.astart) * grafic_cosmo_parameters.H0/100.0); }

		double getBaryonParticleMass() { return baryonParticleMass; }
		double getCDMParticleMass() { return CDMparticleMass; }

		/*!
			\brief dumps the velocities stored in vel* files from the grafic IC to a txt file
			\details 
			@param dirname - dir name with grafic ICs
			@param outfname - output file name prefix. Suffixies will be added for files with baryon velocities and CDM velocities
			@return
		
			\date Apr 14, 2011, 12:29:40 PM
			\author Bartosz Lew
		*/
		void dumpGraficProperVelocities(string dirname, string outfname);
		
		/***************************************************************************************/		
		/***************************************************************************************/		
		/***************************************************************************************/		
	private:
		
		
		void allocate_gadget_memory();		
		void free_gadget_memory();		
		void free_tipsy_memory();		
		int get_grafic_header_size() { return sizeof(grafic_level0_header_t)+2*sizeof(int32_t); }
		double* read_grafic_slice(FILE** f, long *cellsInSlice);
		grafic_program_parameters_t read_grafic_parameters(string dirname);
		grafic_cosmoData_t read_grafic_cosmo_parameters(string dirname);
		bool grafic_data_is_double(grafic_level0_header_t h, uint32_t sliceSize);

		//! tests the type of the data block in the grafic files given a name of any of the velocity files.
		bool grafic_data_is_double(string fname);
		gadget_snapshot_type2_block_t readGadgetSnapshotType2InfoBlock(FILE** f);
		string gadgetBlock2BlockIDStr(gadget_IC_blocks data);
		void dumpGadgetSnapshotBlock(FILE** fd, string outputFile, gadget_IC_blocks block);
		long getTotalNumberOfParticles(const gadget_snapshot_file_header_t& header);
		long getLocalNumberOfParticles(const gadget_snapshot_file_header_t& header);
		
		/*!
			\brief get the velocity factor to convert between displacements and velocities
			\details 
			@param dirname in which the parameter file is stored
			
			It simply reads the velocity factor from the text file that was stored by the modified version of grafic++ program

			The units of the velocity factor is [km/s/Mpc]
		
			\date Jan 25, 2011, 3:40:29 PM
			\author Bartosz Lew
		*/
		double getVelocityFactor(string dirname);
		
		//! calculate the baryon and CDM particle comoving mass within a cell in gadget units (10^10 Msol h^-1 )
		void calculateParticleMasses();

		grafic_level0_header_t read_grafic_header(string fname);
		void print_grafic_header_info(grafic_level0_header_t header);
		void printGadgetInfoBlock(gadget_snapshot_type2_block_t* b);
		void writeGadgetInfoBlock(gadget_snapshot_type2_block_t* b, FILE** f);
		int readGadgetHeader(gadget_snapshot_file_header_t* gadget_header, FILE** f);
		void printGadgetHeaderInfo(gadget_snapshot_file_header_t* gadget_header);
		
		
		cpedsMsgs *msgs;
		gadget_particle_data_t *P;
		gadget_snapshot_file_header_t gadget_header;
		tipsyHeader_t tipsyHeader;
		tipsy_dark_particle_t *tipsyPdark;
		tipsy_gas_particle_t *tipsyPgas;
		
		int *Id;
		double  Time, Redshift;
		double baryonParticleMass,CDMparticleMass; // in units of 10^10 solar masses/h - these are the gadget mass units
		int     NumPart, Ngas;
		grafic_level0_header_t grafic_header;
		grafic_program_parameters_t grafic_program_parameters;
		grafic_cosmoData_t grafic_cosmo_parameters;
		
		mscsFunction3dregc ICdata;
		
		
		double gadgetMassUnit; // in SI
		
};

#endif /* NBODY_IO_H_ */
